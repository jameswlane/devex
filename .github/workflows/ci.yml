name: CI
on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/ci.yml'
  pull_request:
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/ci.yml'

permissions:
  contents: read

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      cli: ${{ steps.changes.outputs.cli }}
      sdk: ${{ steps.changes.outputs.sdk }}
      plugins: ${{ steps.changes.outputs.plugins }}
      plugin-matrix: ${{ steps.plugins.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.cli == 'true' || steps.changes.outputs.sdk == 'true' || steps.changes.outputs.plugins == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect path changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            cli:
              - 'apps/cli/**'
            sdk:
              - 'packages/plugin-sdk/**'
            plugins:
              - 'packages/**'
              - '!packages/plugin-sdk/**'

      - name: Detect changed plugins
        if: steps.changes.outputs.plugins == 'true'
        id: plugins
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, compare against the base branch
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..HEAD)
          else
            # For pushes, compare against the previous commit
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi

          changed_plugins=()

          for file in $changed_files; do
            if [[ $file == packages/* ]]; then
              plugin_dir=$(echo $file | cut -d'/' -f2)
              # Skip plugin-sdk and ensure plugin has main.go or package.json
              if [ "$plugin_dir" != "plugin-sdk" ] && \
                 ([ -f "packages/$plugin_dir/main.go" ] || [ -f "packages/$plugin_dir/package.json" ]); then
                if [[ ! " ${changed_plugins[@]} " =~ " $plugin_dir " ]]; then
                  changed_plugins+=("$plugin_dir")
                fi
              fi
            fi
          done

          # Convert to JSON array for matrix
          if [ ${#changed_plugins[@]} -gt 0 ]; then
            plugins_json=$(printf '%s\n' "${changed_plugins[@]}" | jq -R . | jq -s -c .)
            echo "matrix=$plugins_json" >> $GITHUB_OUTPUT
            echo "Changed plugins: ${changed_plugins[*]}"
          else
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "No plugins changed"
          fi

  test-cli:
    name: Test CLI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.cli == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache TurboRepo builds
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-cli-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-cli-

      - uses: jdx/mise-action@v3
        with:
          install: true
          cache: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Lint CLI
        run: pnpm turbo lint --filter=@devex/cli --concurrency=1

      - name: Build CLI
        run: pnpm turbo build --filter=@devex/cli

      - name: Test CLI
        run: pnpm turbo test --filter=@devex/cli

  test-sdk:
    name: Test Plugin SDK
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.sdk == 'true'
    defaults:
      run:
        working-directory: packages/plugin-sdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: jdx/mise-action@v3
        with:
          install: true
          cache: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          go mod download
          go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Lint SDK
        run: golangci-lint run

      - name: Build SDK
        run: go build ./...

      - name: Test SDK
        run: |
          echo "Running comprehensive Plugin SDK tests with Ginkgo..."
          ginkgo run -v --randomize-all --fail-on-pending . || go test -v ./...

      - name: Verify SDK can be imported
        run: |
          echo "Verifying SDK can be imported as a Go module..."
          cd /tmp
          go mod init test-import
          cat > main.go << 'EOF'
          package main
          import (
              "fmt"
              "github.com/jameswlane/devex/packages/plugin-sdk"
          )
          func main() {
              info := sdk.PluginInfo{
                  Name: "test-plugin",
                  Version: "1.0.0",
              }
              fmt.Printf("Plugin: %s v%s\n", info.Name, info.Version)
          }
          EOF
          go build . || echo "SDK import test failed - this is expected for unreleased versions"

  test-plugins:
    name: Test Plugins
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.plugins == 'true' && needs.detect-changes.outputs.plugin-matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJSON(needs.detect-changes.outputs.plugin-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: jdx/mise-action@v3
        with:
          install: true
          cache: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Test plugin ${{ matrix.plugin }}
        run: |
          cd packages/${{ matrix.plugin }}

          echo "::group::Updating dependencies for ${{ matrix.plugin }}"
          if [ -f "go.mod" ]; then
            go mod tidy
            go mod download
          fi
          echo "::endgroup::"

          echo "::group::Linting ${{ matrix.plugin }}"
          if [ -f "go.mod" ]; then
            golangci-lint run || echo "Linting failed for ${{ matrix.plugin }}"
          fi
          echo "::endgroup::"

          echo "::group::Building ${{ matrix.plugin }}"
          if [ -f "main.go" ]; then
            go build -v -o devex-plugin-${{ matrix.plugin }} .
            echo "::endgroup::"

            echo "::group::Testing plugin functionality"
            ./devex-plugin-${{ matrix.plugin }} --plugin-info || echo "Plugin info command not available"
            echo "::endgroup::"
          elif [ -f "package.json" ]; then
            echo "Node.js plugin detected"
            if command -v npm &> /dev/null; then
              npm install || echo "npm install failed"
              npm test || echo "npm test failed"
            fi
            echo "::endgroup::"
          fi

          echo "::group::Running tests"
          if [ -f "go.mod" ] && ls *_test.go >/dev/null 2>&1; then
            go test -v ./...
          else
            echo "No tests found for ${{ matrix.plugin }}"
          fi
          echo "::endgroup::"

  # Build web apps if any core files changed
  build-web:
    name: Build Web Apps
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: jdx/mise-action@v3
        with:
          install: true
          cache: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Build web app
        run: pnpm turbo run build --filter=@devex/web || echo "Web build failed"

      - name: Build docs
        run: pnpm turbo run build --filter=@devex/docs || echo "Docs build failed"