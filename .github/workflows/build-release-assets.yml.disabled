name: Build Release Assets
on:
  push:
    tags:
      - 'v*'                    # CLI releases (v0.1.0, v1.0.0)
      - 'packages/*/v*'         # SDK releases (packages/plugin-sdk/v0.0.1)
      - 'plugins/*/v*'          # Plugin releases (plugins/package-manager-apt/v0.0.1)

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  packages: write

jobs:
  build-assets:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: jdx/mise-action@v3
        with:
          install: true
          cache: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Install GoReleaser Pro
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: '~> v2'
          install-only: true
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Determine component type from tag
        id: component
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          if [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "component=cli" >> $GITHUB_OUTPUT
            echo "CLI release detected: $TAG_NAME"
          elif [[ "$TAG_NAME" =~ ^packages/.*v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "component=sdk" >> $GITHUB_OUTPUT
            echo "SDK release detected: $TAG_NAME"
          elif [[ "$TAG_NAME" =~ ^plugins/.*v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "component=plugin" >> $GITHUB_OUTPUT
            PLUGIN_NAME=$(echo "$TAG_NAME" | sed 's|^plugins/||' | sed 's|/v.*||')
            echo "plugin_name=$PLUGIN_NAME" >> $GITHUB_OUTPUT
            echo "Plugin release detected: $PLUGIN_NAME at $TAG_NAME"
          else
            echo "component=unknown" >> $GITHUB_OUTPUT
            echo "Unknown tag pattern: $TAG_NAME"
          fi

      - name: Run GoReleaser Pro
        if: steps.component.outputs.component != 'unknown'
        run: |
          echo "Building assets for ${{ steps.component.outputs.component }} release: ${{ steps.component.outputs.tag_name }}"

          # Set environment variables for GoReleaser conditional builds
          export RELEASE_CLI="false"
          export RELEASE_SDK="false"
          export RELEASE_PLUGINS="false"

          if [ "${{ steps.component.outputs.component }}" = "cli" ]; then
            export RELEASE_CLI="true"
            echo "Building CLI assets"
          elif [ "${{ steps.component.outputs.component }}" = "sdk" ]; then
            export RELEASE_SDK="true"
            echo "SDK is a Go module - no binary assets to build"
            echo "Skipping GoReleaser for SDK release"
            exit 0
          elif [ "${{ steps.component.outputs.component }}" = "plugin" ]; then
            export RELEASE_PLUGINS="true"
            export CHANGED_PLUGINS="${{ steps.component.outputs.plugin_name }}"
            echo "Building plugin assets for: ${{ steps.component.outputs.plugin_name }}"
          fi

          echo "RELEASE_CLI=$RELEASE_CLI"
          echo "RELEASE_SDK=$RELEASE_SDK"
          echo "RELEASE_PLUGINS=$RELEASE_PLUGINS"
          echo "CHANGED_PLUGINS=$CHANGED_PLUGINS"

          # Run GoReleaser
          goreleaser release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Notify completion
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Assets built successfully for ${{ steps.component.outputs.component }} release"
            echo "Tag: ${{ steps.component.outputs.tag_name }}"
          else
            echo "❌ Asset build failed for ${{ steps.component.outputs.tag_name }}"
          fi