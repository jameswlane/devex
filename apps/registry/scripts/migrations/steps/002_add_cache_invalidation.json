{
	"id": "002_add_cache_invalidation",
	"name": "Add Cache Invalidation System",
	"description": "Create tables and triggers for cache invalidation to prevent race conditions",
	"prerequisite": "001_add_rate_limit_tables",
	"warning": "This migration adds cache invalidation tracking. May temporarily impact performance during migration.",
	"up": "CREATE TABLE IF NOT EXISTS cache_invalidation_log (\n  id BIGINT AUTO_INCREMENT PRIMARY KEY,\n  cache_key VARCHAR(500) NOT NULL,\n  cache_pattern VARCHAR(500),\n  table_name VARCHAR(100) NOT NULL,\n  operation VARCHAR(20) NOT NULL,\n  row_id VARCHAR(255),\n  invalidated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  processed BOOLEAN DEFAULT FALSE,\n  INDEX idx_cache_invalidation_key (cache_key),\n  INDEX idx_cache_invalidation_pattern (cache_pattern),\n  INDEX idx_cache_invalidation_table (table_name),\n  INDEX idx_cache_invalidation_processed (processed),\n  INDEX idx_cache_invalidation_timestamp (invalidated_at)\n);\n\nCREATE TABLE IF NOT EXISTS cache_locks (\n  lock_key VARCHAR(500) PRIMARY KEY,\n  locked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  expires_at TIMESTAMP NOT NULL,\n  lock_id VARCHAR(255) NOT NULL,\n  INDEX idx_cache_locks_expires (expires_at)\n);\n\n-- Trigger for applications table\nCREATE TRIGGER trg_applications_cache_invalidation\nAFTER INSERT OR UPDATE OR DELETE ON applications\nFOR EACH ROW\nBEGIN\n  DECLARE operation_type VARCHAR(20);\n  DECLARE row_identifier VARCHAR(255);\n  \n  IF (TG_OP = 'DELETE') THEN\n    SET operation_type = 'DELETE';\n    SET row_identifier = OLD.id;\n  ELSIF (TG_OP = 'INSERT') THEN\n    SET operation_type = 'INSERT';\n    SET row_identifier = NEW.id;\n  ELSE\n    SET operation_type = 'UPDATE';\n    SET row_identifier = NEW.id;\n  END IF;\n  \n  INSERT INTO cache_invalidation_log (cache_key, cache_pattern, table_name, operation, row_id)\n  VALUES \n    (CONCAT('app:', row_identifier), 'app:*', 'applications', operation_type, row_identifier),\n    ('registry:apps', 'registry:*', 'applications', operation_type, row_identifier),\n    ('search:apps:*', 'search:*', 'applications', operation_type, row_identifier);\nEND;\n\n-- Trigger for plugins table\nCREATE TRIGGER trg_plugins_cache_invalidation\nAFTER INSERT OR UPDATE OR DELETE ON plugins\nFOR EACH ROW\nBEGIN\n  DECLARE operation_type VARCHAR(20);\n  DECLARE row_identifier VARCHAR(255);\n  \n  IF (TG_OP = 'DELETE') THEN\n    SET operation_type = 'DELETE';\n    SET row_identifier = OLD.id;\n  ELSIF (TG_OP = 'INSERT') THEN\n    SET operation_type = 'INSERT';\n    SET row_identifier = NEW.id;\n  ELSE\n    SET operation_type = 'UPDATE';\n    SET row_identifier = NEW.id;\n  END IF;\n  \n  INSERT INTO cache_invalidation_log (cache_key, cache_pattern, table_name, operation, row_id)\n  VALUES \n    (CONCAT('plugin:', row_identifier), 'plugin:*', 'plugins', operation_type, row_identifier),\n    ('registry:plugins', 'registry:*', 'plugins', operation_type, row_identifier),\n    ('search:plugins:*', 'search:*', 'plugins', operation_type, row_identifier);\nEND;",
	"down": "DROP TRIGGER IF EXISTS trg_plugins_cache_invalidation;\nDROP TRIGGER IF EXISTS trg_applications_cache_invalidation;\nDROP TABLE IF EXISTS cache_locks;\nDROP TABLE IF EXISTS cache_invalidation_log;",
	"checksum": "b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef1234567"
}
