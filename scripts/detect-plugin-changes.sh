#!/bin/bash
set -euo pipefail

# detect-plugin-changes.sh
# Detects changed plugins and generates dynamic GoReleaser includes
# Used by the root .goreleaser.yml to conditionally build plugins

echo "üîç Detecting changed plugins for release..."

# Get changed plugins from environment variable (set by release workflow)
CHANGED_PLUGINS="${CHANGED_PLUGINS:-}"

if [ -z "$CHANGED_PLUGINS" ]; then
    echo "No changed plugins specified in CHANGED_PLUGINS environment variable"
    exit 0
fi

# Convert comma-separated list to array
IFS=',' read -ra PLUGINS <<< "$CHANGED_PLUGINS"

echo "Changed plugins: ${PLUGINS[*]}"

# Create temporary GoReleaser includes directory
mkdir -p .tmp/goreleaser-includes

# Generate dynamic includes for each changed plugin
for plugin in "${PLUGINS[@]}"; do
    plugin=$(echo "$plugin" | xargs)  # Trim whitespace

    if [ -z "$plugin" ]; then
        continue
    fi

    echo "Processing plugin: $plugin"

    # Check if plugin has a GoReleaser config
    if [ -f "packages/$plugin/.goreleaser.yml" ]; then
        echo "  ‚úÖ Found GoReleaser config for $plugin"

        # Create a dynamic include for this plugin
        cat > ".tmp/goreleaser-includes/$plugin.yml" << EOF
# Dynamic include for plugin: $plugin
# Generated by detect-plugin-changes.sh

includes:
  - from_file:
      path: packages/$plugin/.goreleaser.yml
    conditions:
      - '{{ eq .Env.RELEASE_PLUGINS "true" }}'
      - '{{ contains .Env.CHANGED_PLUGINS "$plugin" }}'
EOF

        echo "  üìù Created dynamic include for $plugin"
    else
        echo "  ‚ö†Ô∏è  No GoReleaser config found for $plugin (packages/$plugin/.goreleaser.yml)"

        # Check if plugin has main.go (Go plugin)
        if [ -f "packages/$plugin/main.go" ]; then
            echo "  üîß Creating basic GoReleaser config for Go plugin: $plugin"

            # Create basic config for Go plugin
            cat > ".tmp/goreleaser-includes/$plugin.yml" << EOF
# Dynamic config for Go plugin: $plugin
# Generated by detect-plugin-changes.sh

builds:
  - id: $plugin
    main: ./packages/$plugin/main.go
    binary: devex-plugin-$plugin
    dir: .
    ldflags:
      - -X main.version={{ .Version }}
      - -X main.commit={{ .Commit }}
      - -X main.date={{ .Date }}
    goos:
      - linux
      - darwin
      - windows
    goarch:
      - amd64
      - arm64
    env:
      - CGO_ENABLED=0

archives:
  - id: $plugin-archive
    builds: [$plugin]
    name_template: 'devex-plugin-$plugin_{{ .Version }}_{{ .Os }}_{{ .Arch }}'
    format: tar.gz
    format_overrides:
      - goos: windows
        format: zip
    files:
      - packages/$plugin/README.md
      - packages/$plugin/LICENSE*
EOF

            echo "  üìù Created basic config for Go plugin: $plugin"
        else
            echo "  ‚ùå Plugin $plugin has no main.go - skipping binary build"
        fi
    fi
done

echo "‚úÖ Plugin change detection complete"

# List generated includes for debugging
if [ -d ".tmp/goreleaser-includes" ]; then
    echo "Generated includes:"
    ls -la .tmp/goreleaser-includes/
fi